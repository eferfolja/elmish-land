//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by elmish-land.
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

module ElmishLand.App

open Elmish
open Elmish.React
open Elmish.HMR
open Feliz
open Feliz.Router
open ElmishLand.Routes
open ElmishLand.Page
open {{RootModule}}
open {{RootModule}}.Shared

[<RequireQualifiedAccess>]
type PageModel =
    {{#each Routes}}
    | {{Name}} of {{ModuleName}}.Model
    {{/each}}
    | NotFound

type Model = {
    Shared: SharedModel
    CurrentRoute: Route
    CurrentPage: PageModel
}

type Msg =
    | SharedMsg of SharedMsg
    | RouteChanged of Route
    {{#each Routes}}
    | {{MsgName}} of {{ModuleName}}.Msg
    {{/each}}

let init () =
    let initialUrl = Route.parse (Router.currentUrl ())
    let sharedModel, sharedCmd = Shared.init ()

    let defaultModel = {
        Shared = sharedModel
        CurrentRoute = initialUrl
        CurrentPage = PageModel.NotFound
    }

    let initPage (page: Page<SharedMsg, 'model, 'msg>) pageModel msg =
        let nextModel, nextCmd = page.Init()
        let nextPage = pageModel nextModel

        {
            defaultModel with
                CurrentPage = nextPage
        },
        Command.batch [ sharedCmd; Command.map msg nextCmd ] |> Command.toCmd SharedMsg

    match initialUrl with
    {{#each Routes}}
    | Route.{{Name}} route ->
        initPage ({{ModuleName}}.page sharedModel route) PageModel.{{Name}} {{MsgName}}
    {{/each}}
    | Route.NotFound ->
        {
            defaultModel with
                CurrentPage = PageModel.NotFound
        },
        Cmd.none

let update (msg: Msg) (model: Model) =
    let updatePage (page: Page<SharedMsg, 'model, 'msg>) model' pageModel pageMsg msg =
        let model'', cmd = page.Update pageMsg model'

        {
            model with
                CurrentPage = pageModel model''
        },
        Command.map msg cmd |> Command.toCmd SharedMsg
    match msg, model.CurrentPage, model.CurrentRoute with
    | SharedMsg msg', _, _ ->
        let model'', cmd = Shared.update msg' model.Shared
        { model with Shared = model'' }, Command.map SharedMsg cmd |> Command.toCmd SharedMsg
    | RouteChanged nextRoute, _, _ ->
        let changeRoute (page: Page<SharedMsg, 'model, 'msg>) pageModel msg =
            let model', msg' = page.Init()
            {
                model with
                    CurrentPage = pageModel model'
                    CurrentRoute = nextRoute
            },
            Command.map msg msg' |> Command.toCmd SharedMsg
        match nextRoute with
        {{#each Routes}}
        | Route.{{Name}} route ->
            changeRoute ({{ModuleName}}.page model.Shared route) PageModel.{{Name}} {{MsgName}}
        {{/each}}
        | Route.NotFound ->
            {
                model with
                    CurrentPage = PageModel.NotFound
                    CurrentRoute = Route.NotFound
            },
            Cmd.none
    {{#each Routes}}
    | {{MsgName}} msg', PageModel.{{Name}} model', Route.{{Name}} route ->
        updatePage ({{ModuleName}}.page model.Shared route) model' PageModel.{{Name}} msg' {{MsgName}}
    {{/each}}
    | msg', model', route' ->
        printfn $"Unhandled App.Msg, CurrentPage.Model and CurrentRoute. Got\nMsg:\n%A{msg'}\nCurrentPage.Model:\n%A{model'}\nCurrentRoute:\n%A{route'}'"
        model, Cmd.none

let view (model: Model) (dispatch: Msg -> unit) =
    let currentPageView =
        match model.CurrentPage, model.CurrentRoute with
        {{#each Routes}}
        | PageModel.{{Name}} m, Route.{{Name}} route -> ({{ModuleName}}.page model.Shared route).View m ({{MsgName}} >> dispatch)
        {{/each}}
        | _ -> Html.h1 "Page not found"

    React.router [
        router.onUrlChanged (Route.parse >> RouteChanged >> dispatch)
        router.children [ currentPageView ]
    ]

let subscribe model =
    Sub.batch [
        match model.CurrentPage, model.CurrentRoute with
        {{#each Routes}}
        | PageModel.{{Name}} m, Route.{{Name}} route -> Sub.map "{{Name}}" {{MsgName}} (({{ModuleName}}.page model.Shared route).Subscriptions m)
        {{/each}}
        | _ -> Sub.none
    ]

Program.mkProgram init update view
|> Program.withErrorHandler (fun (msg, ex) -> printfn "Program error handler:\r\n%s\r\n%O" msg ex)
|> Program.withReactBatched "app"
|> Program.withSubscription subscribe
|> Program.run
