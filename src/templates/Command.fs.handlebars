namespace Elmish

open Elmish
open Feliz
open {{RootModule}}.Routes

[<RequireQualifiedAccess>]
type Command<'msg, 'sharedMsg> private =
    | None
    | Batch of Command<'msg, 'sharedMsg> list
    | Cmd of Cmd<'msg>
    | SharedMsg of 'sharedMsg

module Command =
    let none = Command.None

    let ofPromise p arg ofSuccess = Cmd.OfPromise.perform p arg ofSuccess |> Command.Cmd

    let tryOfPromise p arg ofSuccess ofError = Cmd.OfPromise.either p arg ofSuccess ofError |> Command.Cmd

    let ofCmd (cmd: Cmd<'msg>) = Command.Cmd(cmd)

    let ofMsg (msg: 'msg) =
        Command.Cmd(Cmd.ofMsg msg)

    let batch cmds = Command.Batch cmds

    let ofShared msg = Command.SharedMsg msg

    let navigate route =
        match route with
        {{#each Routes}}
        | Route.{{Name}} ({{#if ArgsPattern}}{{ArgsPattern}}, {{/if}}query) -> Router.Cmd.navigate({{#if UrlUsage}}{{UrlUsage}}{{else}}""{{/if}}, query)
        {{/each}}
        | Route.NotFound -> Router.Cmd.navigate("notFound")
        |> ofCmd

    let rec map f command =
        match command with
        | Command.None -> Command.None
        | Command.Batch cmds -> Command.Batch (cmds |> List.map (map f))
        | Command.Cmd cmd -> Command.Cmd (Cmd.map f cmd)
        | Command.SharedMsg msg -> Command.SharedMsg msg

    let rec toCmd fromSharedMsg command =
        match command with
        | Command.None -> Cmd.none
        | Command.Batch cmds -> Cmd.batch (List.map (toCmd fromSharedMsg) cmds)
        | Command.Cmd cmd -> cmd
        | Command.SharedMsg msg -> Cmd.ofMsg (fromSharedMsg msg)
