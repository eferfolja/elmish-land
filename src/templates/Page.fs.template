//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by elmish-land.
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElmishLand

open System.Runtime.CompilerServices
open Feliz

[<assembly: InternalsVisibleTo("ElmishLand.{{RootModule}}.App")>]
do()

type Page<'sharedMsg, 'pageModel, 'pageMsg> =
    internal {
        Init: unit -> 'pageModel * Command<'pageMsg, 'sharedMsg>
        Update: 'pageMsg -> 'pageModel -> 'pageModel * Command<'pageMsg, 'sharedMsg>
        View: 'pageModel -> ('pageMsg -> unit) -> {{ViewType}}
        Subscriptions: 'pageModel -> (string list * (('pageMsg -> unit) -> System.IDisposable)) list
        Layout: Layout
    }

module Page =
    let from init update view =
        {
            Init = init
            Update = update
            View = view
            Subscriptions = fun _ -> []
            Layout = Layout.None
        }

    let withSubscriptions subscriptions (page: Page<'sharedMsg, 'pageModel, 'pageMsg>) =
        { page with Subscriptions = subscriptions }

    /// NOTE! This function should only be used from the 'withXXXLayout' helper function in the layout file (src/Layouts/XXX/Layout.fs)
    let withUntypedLayout (layout: Layout) (page: Page<_, _, _>) =
        { page with Layout = layout }
