//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by elmish-land.
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElmishLand

open System.Runtime.CompilerServices
open Feliz

[<assembly: InternalsVisibleTo("ElmishLand.{{RootModule}}.App")>]
do()

[<RequireQualifiedAccess>]
type Layout =
    internal
    {{#each Layouts}}
    | {{Name}} of obj
    {{/each}}
    | None

type Layout<'sharedMsg, 'layoutModel, 'layoutMsg> =
    internal {
        Init: unit -> 'layoutModel * Command<'layoutMsg, 'sharedMsg>
        Update: 'layoutMsg -> 'layoutModel -> 'layoutModel * Command<'layoutMsg, 'sharedMsg>
        View: 'layoutModel -> {{ViewType}} -> ('layoutMsg -> unit) -> {{ViewType}}
        Subscriptions: 'layoutModel -> (string list * (('layoutMsg -> unit) -> System.IDisposable)) list
    }

module Layout =
    {{#each Layouts}}
    /// NOTE! This function should only be used from the 'with{{Name}}Layout' helper function in you layout (src/Layouts/{{Name}}/Layout.fs)
    let untyped{{Name}} (props: obj) = Layout.{{Name}} props
    {{/each}}

    let from init update view =
        {
            Init = init
            Update = update
            View = view
            Subscriptions = fun _ -> []
        }

    let withSubscriptions subscriptions (layout: Layout<'sharedMsg, 'layoutModel, 'layoutMsg>) =
        { layout with Subscriptions = subscriptions }
