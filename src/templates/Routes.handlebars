{{Disclaimer}}
module {{RootModule}}.Routes

open Feliz.Router

[<RequireQualifiedAccess>]
type Route =
    {{#each Routes}}
    | {{Name}}{{#if ArgsDefinition}} of {{ArgsDefinition}}{{/if}}
    {{/each}}
    | NotFound

module Route =
    let asUrl =
        function
        {{#each Routes}}
        | Route.{{Name}} {{#if ArgsDefinition}}({{ArgsDefinition}}){{/if}} -> $"{{Url}}"
        {{/each}}
        | Route.NotFound -> "notFound"

    let parse (xs: string list) =
        match xs |> List.map (fun x -> x.ToLowerInvariant ()) with
        {{#each Routes}}
        | {{UrlPattern}}
        | {{UrlPatternWithQuery}} -> Route.{{Name}} {{#if ArgsUsage}}({{ArgsUsage}}){{/if}}
        {{/each}}
        | other ->
            printfn "Route not found: '%A'" other
            Route.NotFound
