{{Autogenerated}}
module {{RootModule}}.Routes

open Feliz.Router

[<RequireQualifiedAccess>]
type Route =
    {{#each Routes}}
    | {{Name}} of {{#if ArgsDefinition}}{{ArgsDefinition}} * {{/if}}query: list<string * string>
    {{/each}}
    | NotFound

module Route =
    let format =
        function
        {{#each Routes}}
        | Route.{{Name}} ({{#if ArgsPattern}}{{ArgsPattern}}, {{/if}}query) -> Router.format({{#if UrlUsage}}{{UrlUsage}}{{else}}""{{/if}}, query)
        {{/each}}
        | Route.NotFound -> "notFound"

    // Need to define our own from Feliz.Router.Route.Query
    // because we need to check if the value is a query parameter
    let private (|Query|_|) (input: string) =
        try
            if input.StartsWith("?") then
                let urlParams = Router.createUrlSearchParams input
                Some [ for entry in urlParams.entries() -> entry.[0], entry.[1] ]
            else
                None
        with
        | _ -> None

    let eq x y =
        System.String.Equals(x, y, System.StringComparison.InvariantCultureIgnoreCase)

    let parse (xs: string list) =
        match xs with
        {{#each Routes}}
        | {{UrlPatternWithQuery}}{{#if UrlPatternWhen}} when {{UrlPatternWhen}}{{/if}} -> Route.{{Name}} ({{#if ArgsUsage}}{{ArgsUsage}}, {{/if}}q)
        {{/each}}
        {{#each Routes}}
        | {{UrlPattern}}{{#if UrlPatternWhen}} when {{UrlPatternWhen}}{{/if}} -> Route.{{Name}} ({{#if ArgsUsage}}{{ArgsUsage}}, {{/if}}[])
        {{/each}}
        | other ->
            printfn "Route not found: '%A'" other
            Route.NotFound

let tryGetQueryParam (name: string) (query: list<string * string>): string option =
    query
    |> List.tryPick (fun (name', value') ->
        if name = name' then
            (Some value')
        else
            None
    )
