//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by elmish-land.
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElmishLand

open System
open Feliz.Router
{{#each RouteParamModules}}
open {{this}}
{{/each}}

[<AutoOpen>]
module Routes =

    {{#each Routes}}
    type {{RouteName}} = {{#if RecordDefinition}}{{RecordDefinition}}{{/if}}
    {{/each}}

    [<RequireQualifiedAccess>]
    type Route =
        {{#each Routes}}
        | {{Name}} of {{RouteName}}
        {{/each}}
        | NotFound

    module Route =
        let internal formatGuid (x: Guid) = string x
        let internal formatInt (x: int) = string x
        let internal formatInt64 (x: int64) = string x
        let internal formatBool (x: bool) = string x
        let internal formatFloat (x: float) = string x
        let internal formatDecimal (x: Decimal) = string x

        let private parseGuid (x: string) =
            match Guid.TryParse x with
            | true, x' -> Some x'
            | _ -> None

        let private parseInt (x: string) =
            match Int32.TryParse x with
            | true, x' -> Some x'
            | _ -> None

        let private parseInt64 (x: string) =
            match Int64.TryParse x with
            | true, x' -> Some x'
            | _ -> None

        let private parseBool (x: string) =
            match bool.TryParse x with
            | true, x' -> Some x'
            | _ -> None

        let private parseFloat (x: string) =
            match Single.TryParse x with
            | true, x' -> Some x'
            | _ -> None

        let private parseDecimal (x: string) =
            match Decimal.TryParse x with
            | true, x' -> Some x'
            | _ -> None

        let format =
            function
            {{#each Routes}}
            | Route.{{Name}} {{#if RecordPattern}}{{RecordPattern}}{{/if}} -> Router.format({{#if UrlUsage}}{{UrlUsage}}{{else}}""{{/if}})
            {{/each}}
            | Route.NotFound -> "notFound"

        // Need to define our own from Feliz.Router.Route.Query
        // because we need to check if the value is a query parameter
        let private (|Query|_|) (input: string) =
            try
                if input.StartsWith("?") then
                    let urlParams = Router.createUrlSearchParams input
                    Some [ for entry in urlParams.entries() -> entry.[0], entry.[1] ]
                else
                    Some []
            with
            | _ -> Some []

        let private eq x y =
            String.Equals(x, y, StringComparison.InvariantCultureIgnoreCase)

        let private containsQuery name (parser: string -> _ option) query =
            query
            |> List.exists (fun (name', value) -> eq name' name && (parser value).IsSome)

        let private tryGetQuery name (parser: string -> _ option) query =
            query
            |> List.tryPick (fun (name', value) ->
                match parser value with
                | Some value' when eq name' name -> Some value'
                | _ -> None
            )

        let private getQuery name (parser: string -> _ option) query =
            tryGetQuery name parser query |> Option.defaultWith (fun () -> failwithf "Query parameter '%s' not found" name)

        let parse (xs: string list) =
            let xs =
                match xs with
                | [] -> [ "?" ]
                | xs when not <| (List.last xs).StartsWith("?") -> List.append xs [ "?" ]
                | xs -> xs
            match xs with
            {{#each Routes}}
            | {{UrlPattern}}{{#if UrlPatternWhen}} when {{UrlPatternWhen}}{{/if}} -> Route.{{Name}} {{#if RecordConstructor}}{{RecordConstructor}}{{/if}}
            {{/each}}
            | other ->
                printfn "Route not found: '%A'" other
                Route.NotFound

        let isEqualWithoutPathAndQuery route1 route2 =
            match route1, route2 with
            {{#each Routes}}
            | Route.{{Name}} _, Route.{{Name}} _ -> true
            {{/each}}
            | _ -> false
