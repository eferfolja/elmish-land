module Trinity.Routes

open Feliz.Router

[<RequireQualifiedAccess>]
type Route =
    {{#each Routes}}
    | {{Name}}
    {{/each}}
    | NotFound

module Route =
    let asUrl = function
        {{#each Routes}}
        | Route.{{Name}} {{Args}} -> "{{Url}}"
        {{/each}}
        | Route.NotFound -> "notFound"

    let parse (xs: string list) =
        match xs |> List.map (fun x -> x.ToLowerInvariant()) with
        {{#each routes}}
        | [ {{#each UrlSegments}}"{{this}}"; {{/each}}{{#if Query}}"{{Query}}"{{/if}} ]
        | [ {{#each UrlSegments}}"{{this}}"; {{/each}} ] -> Route.{{Name}}
        {{/each}}
        | other ->
            printfn "Route not found: '%%A'" other
            Route.NotFound
