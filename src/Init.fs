module ElmishLand.Init

open System
open System.IO
open System.Threading
open ElmishLand.Base
open ElmishLand.TemplateEngine
open ElmishLand.Log
open ElmishLand.DotNetCli
open ElmishLand.Process
open ElmishLand.AppError

let getNodeVersion () =
    runProcess (FilePath.fromString Environment.CurrentDirectory) "node" [| "-v" |] CancellationToken.None ignore
    |> Result.mapError (fun _ -> AppError.NodeNotFound)
    |> Result.bind (fun output ->
        match Version.TryParse(output[1..]) with
        | true, version when version >= minimumRequiredNode -> Ok version
        | _ -> Error NodeNotFound)

let init (projectDir: AbsoluteProjectDir) =
    try
        let projectName = projectDir |> ProjectName.fromProjectDir

        result {
            let log = Log()
            let! dotnetSdkVersion = getLatestDotnetSdkVersion ()
            Log().Info("Using .NET SDK: {}", dotnetSdkVersion)

            let! nodeVersion = getNodeVersion ()
            Log().Info("Using Node.js: {}", nodeVersion)

            log.Info("Initializing project. {}", AbsoluteProjectDir.asString projectDir)

            let writeResource = writeResource projectDir

            writeResource
                "Project.fsproj.handlebars"
                [ $"%s{ProjectName.asString projectName}.fsproj" ]
                (Some(
                    handlebars {|
                        DotNetVersion = (DotnetSdkVersion.asFrameworkVersion dotnetSdkVersion)
                    |}
                ))

            writeResource
                "global.json.handlebars"
                [ "global.json" ]
                (Some(
                    handlebars {|
                        DotNetSdkVersion = (DotnetSdkVersion.asString dotnetSdkVersion)
                    |}
                ))

            writeResource "index.html" [ "index.html" ] None

            writeResource
                "package.json.handlebars"
                [ "package.json" ]
                (Some(
                    handlebars {|
                        ProjectName = projectName |> ProjectName.asString |> String.asKebabCase
                    |}
                ))

            writeResource "settings.json" [ ".vscode"; "settings.json" ] None

            let rootModuleName = projectName |> ProjectName.asString |> quoteIfNeeded

            let homeRoute = {
                Name = "Home"
                ModuleName = $"%s{rootModuleName}.Pages.Home.Page"
                ArgsDefinition = ""
                ArgsUsage = ""
                ArgsPattern = ""
                Url = "/"
                UrlPattern = "[]"
                UrlPatternWithQuery = "[]"
            }

            let routeData = {
                Autogenerated = autogenerated.Value
                RootModule = rootModuleName
                Routes = [| homeRoute |]
            }

            writeResource "Shared.handlebars" [ "src"; "Shared.fs" ] (Some(handlebars routeData))

            writeResource
                "Page.handlebars"
                [ "src"; "Pages"; "Home"; "Page.fs" ]
                (Some(
                    handlebars {|
                        RootModule = rootModuleName
                        Route = homeRoute
                    |}
                ))

            generateRoutesAndApp projectDir routeData

            do!
                [
                    "dotnet", [| "new"; "tool-manifest"; "--force" |]
                    for name, version in dotnetToolDependencies do
                        "dotnet", [| "tool"; "install"; name; version |]
                    yield! dependencyCommands
                ]
                |> List.map (fun (cmd, args) ->
                    AbsoluteProjectDir.asFilePath projectDir, cmd, args, CancellationToken.None, ignore)
                |> runProcesses
        }
        |> handleAppResult (fun () ->
            printfn
                $"""
    %s{commandHeader $"created a new project in ./%s{ProjectName.asString projectName}"}
    Run the following command to start the development server:

    dotnet elmish-land server
    """ )

    with :? IOException as ex ->
        printfn $"%s{ex.Message}"
        -1
