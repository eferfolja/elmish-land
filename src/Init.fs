module ElmishLand.Init

open System
open System.IO
open System.Text.RegularExpressions
open System.Threading
open ElmishLand.Base
open ElmishLand.TemplateEngine

let getLatestSdkVersion () =
    let log = Log()

    runProcess
        (FilePath.fromString Environment.CurrentDirectory)
        "dotnet"
        [| "--list-sdks" |]
        CancellationToken.None
        ignore
    |> Result.bind (fun output ->
        log.Info("Output: {}", output)

        (output.Split(Environment.NewLine)
         |> Array.choose (fun line ->
             match DotnetSdkVersion.fromString (Regex.Match(line, "\d.\d.\d{3}").Value) with
             | Some(DotnetSdkVersion version) when version >= (DotnetSdkVersion.value minimumRequiredDotnetSdk) ->
                 log.Info("Line contains a .NET SDK version: {}", version)
                 Some(DotnetSdkVersion version)
             | _ ->
                 log.Info("Line does not contain a .NET SDK version: {}", line)
                 None)
         |> fun sdkVersions ->
             if Array.isEmpty sdkVersions then
                 log.Error("Found no installed dotnet SDKs")
                 Error DotnetSdkNotFound
             else
                 sdkVersions |> Seq.max |> Ok))

let init (projectDir: AbsoluteProjectDir) =
    try
        let projectName = projectDir |> ProjectName.fromProjectDir

        result {
            let log = Log()
            let! sdkVersion = getLatestSdkVersion ()

            Log().Info("Using sdkVersion: {}", sdkVersion)

            log.Info("Initializing project. {}", AbsoluteProjectDir.asString projectDir)

            let writeResource = writeResource projectDir

            writeResource
                "Project.fsproj.handlebars"
                [ $"%s{ProjectName.asString projectName}.fsproj" ]
                (Some(
                    handlebars {|
                        DotNetVersion = (DotnetSdkVersion.asFrameworkVersion sdkVersion)
                    |}
                ))

            writeResource
                "global.json.handlebars"
                [ "global.json" ]
                (Some(
                    handlebars {|
                        DotNetSdkVersion = (DotnetSdkVersion.asString sdkVersion)
                    |}
                ))

            writeResource "index.html" [ "index.html" ] None

            writeResource
                "package.json.handlebars"
                [ "package.json" ]
                (Some(
                    handlebars {|
                        ProjectName = projectName |> ProjectName.asString |> String.asKebabCase
                    |}
                ))

            writeResource "settings.json" [ ".vscode"; "settings.json" ] None

            let rootModuleName = projectName |> ProjectName.asString |> quoteIfNeeded

            let homeRoute = {
                Name = "Home"
                ModuleName = $"%s{rootModuleName}.Pages.Home.Page"
                ArgsDefinition = ""
                ArgsUsage = ""
                ArgsPattern = ""
                Url = "/"
                UrlPattern = "[]"
                UrlPatternWithQuery = "[]"
            }

            let routeData = {
                Autogenerated = autogenerated.Value
                RootModule = rootModuleName
                Routes = [| homeRoute |]
            }

            writeResource "Shared.handlebars" [ "src"; "Shared.fs" ] (Some(handlebars routeData))

            writeResource
                "Page.handlebars"
                [ "src"; "Pages"; "Home"; "Page.fs" ]
                (Some(
                    handlebars {|
                        RootModule = rootModuleName
                        Route = homeRoute
                    |}
                ))

            generateRoutesAndApp projectDir routeData

            do!
                [
                    "dotnet", [| "new"; "tool-manifest"; "--force" |]
                    "dotnet", [| "tool"; "install"; "fable"; "--version 4.*" |]
                    "dotnet",
                    [|
                        "tool"
                        "install"
                        "elmish-land"
                        if isPreRelease.Value then "--prerelease" else ()
                    |]
                    "dotnet", [| "add"; "package"; "Fable.Elmish.HMR"; "--version 7.*" |]
                    "dotnet", [| "add"; "package"; "Fable.Elmish.React"; "--version 4.*" |]
                    "dotnet", [| "add"; "package"; "Feliz"; "--version 2.*" |]
                    "dotnet", [| "add"; "package"; "Feliz.Router"; "--version 4.*" |]
                    "dotnet", [| "add"; "package"; "Elmish"; "--version 4.*" |]
                    "npm", [| "install"; "react@18 react-dom@18"; "--save" |]
                    "npm", [| "install"; "vite@5"; "--save-dev" |]
                ]
                |> List.map (fun (cmd, args) ->
                    AbsoluteProjectDir.asFilePath projectDir, cmd, args, CancellationToken.None, ignore)
                |> runProcesses
        }
        |> handleAppResult (fun () ->
            printfn
                $"""
    %s{commandHeader $"created a new project in ./%s{ProjectName.asString projectName}"}
    Run the following command to start the development server:

    dotnet elmish-land server
    """ )

    with :? IOException as ex ->
        printfn $"%s{ex.Message}"
        -1
