module ElmishLand.Init

open System.IO
open System.Threading
open ElmishLand.Base
open ElmishLand.TemplateEngine

let init (projectDir: AbsoluteProjectDir) =
    try
        let projectName = projectDir |> ProjectName.fromProjectDir

        let copyFile = copyFile projectDir
        let cpSame fileName replace = copyFile fileName fileName replace
        copyFile [ "PROJECT_NAME.fsproj" ] [ $"%s{ProjectName.asString projectName}.fsproj" ] None
        cpSame [ "global.json" ] None
        cpSame [ "index.html" ] None
        cpSame [ "package.json" ] (Some(fun x -> x.Replace("{{PROJECT_NAME}}", ProjectName.asString projectName)))
        copyFile [ "dotnet-tools.json" ] [ ".config"; "dotnet-tools.json" ] None

        let rootModuleName = projectName |> ProjectName.asString |> quoteIfNeeded

        let homeRoute = {
            Name = "Home"
            ModuleName = $"%s{rootModuleName}.Pages.Home.Page"
            ArgsDefinition = ""
            ArgsUsage = ""
            ArgsPattern = ""
            Url = "/"
            UrlPattern = "[]"
            UrlPatternWithQuery = "[]"
        }

        let routeData = {
            Autogenerated = autogenerated
            RootModule = rootModuleName
            Routes = [| homeRoute |]
        }

        copyFile [ "Shared.handlebars" ] [ "src"; "Shared.fs" ] (Some(processTemplate routeData))

        copyFile
            [ "Page.handlebars" ]
            [ "src"; "Pages"; "Home"; "Page.fs" ]
            (Some(
                processTemplate {|
                    RootModule = rootModuleName
                    Route = homeRoute
                |}
            ))

        generateRoutesAndApp projectDir routeData

        runProcesses [
            projectDir,
            "dotnet",
            [|
                "tool"
                "install"
                "elmish-land"
                if isPreRelease then "--prerelease" else ()
            |],
            CancellationToken.None,
            ignore
            projectDir, "npm", [| "install" |], CancellationToken.None, ignore
        ]
        |> handleAppResult (fun () ->
            printfn
                $"""
    %s{commandHeader $"created a new project in ./%s{ProjectName.asString projectName}"}
    Run the following command to start the development server:

    dotnet elmish-land server
    """ )

    with :? IOException as ex ->
        printfn $"%s{ex.Message}"
        -1
